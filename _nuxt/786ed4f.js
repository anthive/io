(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{272:function(e,t,n){var content=n(661);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(12).default)("5b4e503a",content,!0,{sourceMap:!1})},273:function(e,t,n){var content=n(666);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(12).default)("781363d8",content,!0,{sourceMap:!1})},660:function(e,t,n){"use strict";var o=n(272);n.n(o).a},661:function(e,t,n){(t=n(11)(!1)).push([e.i,".list-children[data-v-6d6a5e28]{padding-left:25px}",""]),e.exports=t},662:function(e,t,n){var map={"./rules_en.md":663,"./rules_ru.md":664};function o(e){var t=r(e);return n(t)}function r(e){if(!n.o(map,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return map[e]}o.keys=function(){return Object.keys(map)},o.resolve=r,e.exports=o,o.id=662},663:function(e,t,n){"use strict";n.r(t),t.default='<section><h1>Terminology and how AntHive works</h1>\n<h2>Goals</h2>\n<p>The general goal is to collect food and grow your colony while making as few errors as possible. A <a href="https://profile.anthive.io/career">carrier</a> mode has more specialized goals like find the shortest path, overcome limited food, tunnels management, performance, etc.</p>\n<h2>Bot</h2>\n<p>Bot is your code that can be written in any language. It\'s listening on port <code>:7070</code> for <em>HTTP</em> calls/requests from <a href="#sim">Sim</a>. It\'s responsibility is to analyze the current state of the <a href="#map">map</a> and assign orders to ants. Response with <em>JSON</em> looks like:</p>\n<pre><code class="json">{\n  <span class="hljs-attr">"orders"</span>: [\n    {\n      <span class="hljs-attr">"antId"</span>: <span class="hljs-number">1</span>,\n      <span class="hljs-attr">"act"</span>: <span class="hljs-string">"unload"</span>,\n      <span class="hljs-attr">"dir"</span>: <span class="hljs-string">"up"</span>\n    },\n    {\n      <span class="hljs-attr">"antId"</span>: <span class="hljs-number">2</span>,\n      <span class="hljs-attr">"act"</span>: <span class="hljs-string">"stay"</span>,\n      <span class="hljs-attr">"dir"</span>: <span class="hljs-string">"down"</span>\n    },\n    {\n      <span class="hljs-attr">"antId"</span>: <span class="hljs-number">3</span>,\n      <span class="hljs-attr">"act"</span>: <span class="hljs-string">"move"</span>,\n      <span class="hljs-attr">"dir"</span>: <span class="hljs-string">"up"</span>\n    }\n  ]\n}\n</code></pre>\n<h2>Sim</h2>\n<p>Sim is a virtual environment that keeps a state of the game, enforces rules, and collects statistics. Sim sends <em>HTTP</em> request to each <a href="#bot">Bot</a> of the current game with a <em>JSON</em> payload that represents the state of the <a href="#map">map</a>.</p>\n<h2>Tick</h2>\n<p>Tick is a life cycle or turn. Each tick is visually represented as a frame on the video replay. The amount of ticks in the game is called age. Each tick is a cycle of:</p>\n<ul>\n<li>Sim sends a request to bots with the current state of the game.</li>\n<li>Bots respond to Sim with orders.</li>\n<li>Sim applying orders to the virtual environment and generating a new state of the game.</li>\n</ul>\n<h2>Map</h2>\n<p>Map is a <em>JSON</em> object that represents basic settings of the map like <code>width</code>, <code>height</code>, etc. Property <code>canvas</code> is a two-dimensional array of map cells. A <code>cell</code> is an object that has the following property:</p>\n<ul>\n<li><code>Food</code> - amount of food in the cell. The number can range from 0-9.</li>\n<li><code>Terrain</code> - type of the cell. Could be &quot;fog&quot;, &quot;empty&quot;, &quot;stone&quot;, &quot;water&quot;, etc.</li>\n<li><code>Ant</code> - whether or not the cell is occupied by an ant. Id used to determine if it\'s your ant or your opponent.</li>\n<li><code>Hive</code> - whether or not it has a hive. Id used to determine if hive belongs to you or your opponent.</li>\n</ul>\n<h2>Order</h2>\n<p>Order is a <em>JSON</em> object that contains only two property <code>act</code> and <code>dir</code>. Act of the order always applies to the cell next to the ant current positon. It could take one of five values <code>stay</code>, <code>move</code>,  <code>eat</code>, <code>load</code>, <code>unload</code>.<br />\ndir is direction of the order specifying to which cell exactly you want to apply an action.</p>\n<h2>Error</h2>\n<p>Your ants can receive an error if the performed illegal action or had a collision. Following is the list of situations that result in an error:</p>\n<ul>\n<li></li>\n<li></li>\n<li></li>\n</ul>\n<h2>Event</h2>\n</section>\n'},664:function(e,t,n){"use strict";n.r(t),t.default='<section><h2>Терминология и как работает AntHive</h2>\n<h1>Цель</h1>\n<p>Общая цель - собрать еду и вырастить свою колонию. Делать как можно меньше ошибок. Режим [карьера] (https://profile.anthive.io/career) имеет более специализированные цели, такие как поиск кратчайшего пути, преодоление ограниченного питания, управление в туннелях, производительность и т.д.</p>\n<h1>Bot</h1>\n<p>Бот - это ваш код, который может быть написан на любом языке. Он прослушивает запросов на <em>HTTP</em> порт <code>:7070</code> от <a href="#sim">Sim</a>. Он анализирует текущее состояния <a href="#map">карты</a> и дает указания для муравьев. Ответ с * JSON * как:</p>\n<pre><code>{\n  &quot;orders&quot;: [\n    {\n      &quot;antId&quot;: 1,\n      &quot;act&quot;: &quot;unload&quot;,\n      &quot;dir&quot;: &quot;up&quot;\n    },\n    {\n      &quot;antId&quot;: 2,\n      &quot;act&quot;: &quot;stay&quot;,\n      &quot;dir&quot;: &quot;down&quot;\n    },\n    {\n      &quot;antId&quot;: 3,\n      &quot;act&quot;: &quot;move&quot;,\n      &quot;dir&quot;: &quot;up&quot;\n    }\n  ]\n}\n</code></pre>\n<h1>Sim</h1>\n<p>Сим это виртуальная среда, которая поддерживает состояние игры. Он обеспечивает соблюдение правил и собирает статистику. Сим отправляет запрос <em>HTTP</em> каждому <a href="#bot">Bot</a> текущей игры с полезной нагрузкой <em>JSON</em>, которая представляет состояние <a href="#map">map</a>.</p>\n<h1>Поставить галочку</h1>\n<p>Тик это жизненный цикл или поворот. Визуально каждый тик представлен в виде кадра при воспроизведении видео. Количество тиков в игре называется возрастом. Каждый тик представляет собой цикл:</p>\n<ul>\n<li>Сим отправляет запрос ботам с текущим состоянием игры.</li>\n<li>Боты отвечают Симу приказами.</li>\n<li>Сим применяет заказы к виртуальной среде и генерирует новое состояние игры.</li>\n</ul>\n<h1>Карта</h1>\n<p>Карта - это объект <em>JSON</em>, который представляет базовые параметры карты, такие как <code>width</code>,<code>height</code> и т.д. Свойство <code>canvas</code> представляет собой двумерный массив ячеек карты. <code>cell</code> - это объект, имеющий следующее свойство:</p>\n<ul>\n<li><code>Food</code> - количество пищи в клетке. Число может варьироваться от 0 до 9.</li>\n<li><code>Terrain</code> - тип ячейки. Может быть <code>туман</code>, <code>пусто</code>, <code>камень</code>, <code>вода</code> и т.д.</li>\n<li><code>Ant</code> - занята ли клетка муравьем или нет. Идентификатор используется для определения, является ли это ваш муравей или ваш противник.</li>\n<li><code>Hive</code> - есть ли у него улей. Id используется для определения того, принадлежит ли улей вам или вашему оппоненту.</li>\n</ul>\n<h1>Приказ</h1>\n<p>Order - это объект <em>JSON</em>, который содержит только два свойства: <code>act</code> и <code>dir</code>. Акт порядка всегда применяется к ячейке рядом с текущим положением муравья. Может принимать одно из пяти значений: <code>stay</code>, <code>move</code>,  <code>eat</code>, <code>load</code>, <code>unload</code>.<br />\nдир - это направление заказа, указывающее, к какой именно ячейке вы хотите применить действие.</p>\n<h1>Ошибка</h1>\n<p>Ваши муравьи могут получить ошибку, если выполнили недопустимое действие или произошли столкновения. Ниже приведен список ситуаций, которые приводят к ошибке:</p>\n<ul>\n<li></li>\n<li></li>\n<li></li>\n</ul>\n<h1>Событие</h1>\n</section>\n'},665:function(e,t,n){"use strict";var o=n(273);n.n(o).a},666:function(e,t,n){(t=n(11)(!1)).push([e.i,".rules[data-v-548ffd89]{height:100%;display:flex;flex-wrap:wrap;flex-direction:column}.card[data-v-548ffd89]{width:100%;max-width:950px;margin:20px auto;height:100%;padding:40px}.rules .list-children[data-v-548ffd89]{padding-left:58px}",""]),e.exports=t},687:function(e,t,n){"use strict";n.r(t);var o={name:"DocsSidebar",data:function(){return{docs:{}}}},r=(n(660),n(13)),l={components:{DocsSidebar:Object(r.a)(o,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("v-navigation-drawer",{attrs:{clipped:e.$vuetify.breakpoint.lgAndUp,app:""}},[n("v-list",{attrs:{dense:""}},[e._l(e.docs,(function(t){return[n("v-list-group",{key:t.chapterName,scopedSlots:e._u([{key:"activator",fn:function(){return[n("v-list-item-content",[n("v-list-item-title",[e._v("\n              "+e._s(t.chapterName)+"\n            ")])],1)]},proxy:!0}],null,!0)},[e._v(" "),e._l(t.rules,(function(t){return n("v-list-item",{key:t.id,attrs:{link:"",to:{path:"/rules/"+t.id}}},[n("v-list-item-content",[n("v-list-item-title",{staticClass:"list-children"},[e._v("\n              "+e._s(t.title)+"\n            ")])],1)],1)}))],2)]}))],2)],1)}),[],!1,null,"6d6a5e28",null).exports},computed:{rules:function(){return n(662)("./rules_".concat(this.$i18n.locale,".md")).default}}},c=(n(665),Object(r.a)(l,(function(){var e=this.$createElement,t=this._self._c||e;return t("section",{staticClass:"docs",attrs:{id:"inspire"}},[t("v-card",{staticClass:"card"},[t("div",{domProps:{innerHTML:this._s(this.rules)}})])],1)}),[],!1,null,"548ffd89",null));t.default=c.exports}}]);